$ docker --version
$ docker info

Muestra las imagenes
$ docker images

Muestra los contenedores
$ docker ps
$ docker ps -a
$ docker ps --help
$ docker ps -l
$ docker ps -n 4
$ docker ps -a -q

Muestra las imagenes
$ docker images --help
$ docker images -a
$ docker images -a -q

delete all stop
$ docker system prune -a

Crear y ejecuta un contenedor nuevo en forma iteractiva
$ docker run -it ubuntu
root@0617fe109b46:/# uname -a

$ docker run -it --name mi_ubutu ubuntu # crea un contenedor desde la imagen ubuntu con nombre mi_ubuntu
root@a9abe5654cf0:/#

$ docker run -it --name mi_ubutu ubuntu bash # crea un contenedor desde la imagen ubuntu con nombre mi_ubuntu e inicializa el comando bash
root@a9abe5654cf0:/#

Inicializando un contenedor parado
$ docker start -i 0617fe109b46
$ docker start -i 0617

Crear contenedor en background - El contenedor esta funcionando despues de estae comando
$ docker run -d nginx

Desgargar imagen desde Docker Hub
$ docker pull ubuntu:trusty

Crea un contenedor con la imagen trusty ubuntu y entra en mod bash
$ docker run -it ubuntu:trusty bash

Elimina un contenedor
$ docker rm c611
$ docker rm heuristic_cerf


Elimina imagenes
$ docker rmi 13b6
$ docker rmi -f 7e0aa2d69a15 # Fuerza borrado aunque este asociado a una imagen

Ejecutar comandos dentro de las imagenes
$ docker exec mi_ubutu echo hola
hola

$ docker exec a9abe5654cf0  echo hola mundo
hola mundo

$ docker exec -it mi_ubutu bash
root@a9abe5654cf0:/# 

$ docker pull python # Descarga imagen de python
$ docker run -it --name mi_python python # Lanza la imagen de python con el comando python

$ docker exec -it mi_python bash 

Comandos Image
$ docker image ls
$ docker image rm -f ubuntu # Elimina una imagen

Comandos container
$ docker container ls
$ docker container ls --help

Docker Logs y Docker kills

$ docker run -d ubuntu sh -c "while true; do date; done"
$ docker logs bold_keldysh # Permite mirar lo que se esta ejecutando en el contenedor
$ docker logs d18394 --tail 10 # Permite mirar lo que se esta ejecutando en el contenedor, los últimos 10 registros


docker kill bold_keldysh # Terminar un container


Docker Top

docker top 26630210bdea
docker stats d18394251999

Docker inspect

$ docker inspect 26630210bdea

Efectua la inspacción y se envía al archivo containe1.txt
$ docker inspect 26630210bdea > containe1.txt
$ docker inspect 7c6d73bed103 > image1.txt

33. Docker Exec: ejecutar comandos contra contenedores
➜  Docker git:(main) ✗ docker run -it --name mi_python python
>>> 
➜  Docker git:(main) ✗ docker ps
CONTAINER ID   IMAGE     COMMAND     CREATED              STATUS              PORTS     NAMES
c5e10739b1d2   python    "python3"   About a minute ago   Up About a minute             mi_python
➜  Docker git:(main) ✗ docker exec -it mi_python bash
root@c5e10739b1d2:/# 

34. Comandos Docker Image y Docker container
➜  Docker git:(main) ✗ docker image
➜  Docker git:(main) ✗ docker image ls
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
python       latest    f48ea80eae5a   11 days ago   917MB
nginx        latest    ea335eea17ab   12 days ago   141MB
ubuntu       latest    ba6acccedd29   6 weeks ago   72.8MB
➜  Docker git:(main) ✗ docker image rm ubuntu:latest
Error response from daemon: conflict: unable to remove repository reference "ubuntu:latest" (must force) - container d1462074008a is using its referenced image ba6acccedd29
➜  Docker git:(main) ✗ docker container
Usage:  docker container COMMAND
Manage containers
➜  Docker git:(main) ✗ docker container ls
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
➜  Docker git:(main) ✗ docker container ls -a
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                     PORTS     NAMES
c5e10739b1d2   python    "python3"                22 minutes ago   Exited (0) 9 minutes ago             mi_python
d1462074008a   ubuntu    "bash"                   19 hours ago     Exited (0) 19 hours ago              mi_ubuntu
d0760423b140   nginx     "/docker-entrypoint.…"   20 hours ago     Exited (0) 19 hours ago              magical_haibt
➜  Docker git:(main) ✗ docker container ls --help

Usage:  docker container ls [OPTIONS]

List containers

Aliases:
  ls, ps, list

Options:
  -a, --all             Show all containers (default shows just running)
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print containers using a Go template
  -n, --last int        Show n last created containers (includes all states) (default -1)
  -l, --latest          Show the latest created container (includes all states)
      --no-trunc        Don't truncate output
  -q, --quiet           Only display container IDs
  -s, --size            Display total file sizes


36. Docker Logs y Docker Kill
➜  Docker git:(main) ✗ docker run -d ubuntu sh -c "while true; do date; done"
01ad88fa222eaaec5a8de31a5a1f685b2ffc37e37bc690171d0ac7b4b201ca04
➜  Docker git:(main) ✗ docker container ls
CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS     NAMES
01ad88fa222e   ubuntu    "sh -c 'while true; …"   About a minute ago   Up About a minute             funny_yalow
➜  Docker git:(main) ✗ docker logs 01ad88
Mon Nov 29 16:44:29 UTC 2021
Mon Nov 29 16:44:29 UTC 2021
Mon Nov 29 16:44:29 UTC 2021
Mon Nov 29 16:44:29 UTC 2021
Mon Nov 29 16:44:29 UTC 2021
Mon Nov 29 16:44:29 UTC 2021
.
.
.
➜  Docker git:(main) ✗ docker logs 01ad88 --tail 10
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021
Mon Nov 29 16:49:12 UTC 2021

➜  Docker git:(main) ✗ docker kill 01ad88
01ad88
➜  Docker git:(main) ✗ docker ps         
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
➜  Docker git:(main) ✗ docker ps -a
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                        PORTS     NAMES
01ad88fa222e   ubuntu    "sh -c 'while true; …"   11 minutes ago   Exited (137) 21 seconds ago             funny_yalow
c5e10739b1d2   python    "python3"                5 hours ago      Exited (0) 5 hours ago                  mi_python
d1462074008a   ubuntu    "bash"                   24 hours ago     Exited (0) 24 hours ago                 mi_ubuntu
d0760423b140   nginx     "/docker-entrypoint.…"   24 hours ago     Exited (0) 24 hours ago                 magical_haibt

37. Docker Top, Docker Stats

➜  Docker git:(main) ✗ docker run -it ubuntu bash
root@931b51e1365e:/# 

➜  Docker git:(main) ✗ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS         PORTS     NAMES
931b51e1365e   ubuntu    "bash"    6 minutes ago   Up 6 minutes             trusting_borg

➜  Docker git:(main) ✗ docker top 931b5
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                1230430             1230407             0                   16:26               pts/0               00:00:00            bash

root@931b51e1365e:/# top  

➜  Docker git:(main) ✗ docker stats 931b5
CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O     PIDS
931b51e1365e   trusting_borg   0.00%     4.152MiB / 15.52GiB   0.03%     11.6kB / 0B   3.38MB / 0B   2


root@931b51e1365e:/# while true
> do
> date
> done

➜  Docker git:(main) ✗ docker stats 931b5

39. Docker Inspect
➜  Docker git:(main) ✗ docker ps -l      
CONTAINER ID   IMAGE     COMMAND   CREATED          STATUS          PORTS     NAMES
931b51e1365e   ubuntu    "bash"    30 minutes ago   Up 30 minutes             trusting_borg

➜  Docker git:(main) ✗ docker inspect 931b51e
[
    {
        "Id": "931b51e1365edf23c04bfaa3909a53cba7896070bc2f3bcece982c07b94e640d",
        "Created": "2021-11-29T21:26:30.526428904Z",
        "Path": "bash",
        "Args": [],
        "State": {
            "Status": "running",

➜  Docker git:(main) ✗ docker inspect 931b51e > container1.txt

➜  Docker git:(main) ✗ docker images                          
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
python       latest    f48ea80eae5a   12 days ago   917MB
nginx        latest    ea335eea17ab   12 days ago   141MB
ubuntu       latest    ba6acccedd29   6 weeks ago   72.8MB
➜  Docker git:(main) ✗ docker inspect f48ea80eae5a
[
    {
        "Id": "sha256:f48ea80eae5a5683e2a734cf4697827339af3ced11e26d0ad58433ddf6fac24f",
        "RepoTags": [
            "python:latest"
        ],
        "RepoDigests": [
            "python@sha256:f44726de10d15558e465238b02966a8f83971fd85a4c4b95c263704e6a6012e9"
        ],
        "Parent": "",
        "Comment": "",
        "Created": "2021-11-17T15:29:24.884398352Z",
        "Container": "cb8ae5d070e71c4d53aedd1bb0e3279cbf4c4dd5d3cb7997967b9a2976cec68f",

41. Introducción a los puertos en Docker
Presentación

42. Gestionar Puertos para acceder al contenedor. Ejemplo con
NGINX
$ docker pull nginx
$ docker images




crea el contenedor desde la imagen de nginx y expone todos los puertos publicos
$ docker run -d -P nginx

$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                   NAMES
cbb83d45f02f   nginx     "/docker-entrypoint.…"   56 seconds ago   Up 54 seconds   0.0.0.0:32768->80/tcp   sharp_neumann


0.0.0.0:32768->80/tcp = Puede acceder por cualquier dirección ip de la máquina principal, y utilizar el puerto 32768 para acceder al puerto 80 de nginx.

http://18.188.39.91:32768/

$ docker run -d --name nginx2 -p 8080:80 nginx
$ docker ps

CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                   NAMES
ef3b63ded848   nginx     "/docker-entrypoint.…"   3 minutes ago    Up 3 minutes    0.0.0.0:8080->80/tcp    nginx2
cbb83d45f02f   nginx     "/docker-entrypoint.…"   16 minutes ago   Up 16 minutes   0.0.0.0:32768->80/tcp   sharp_neumann


http://18.188.39.91:8080/


43. Redes en Docker

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
046c541c1550   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local

Red bridge permite que haya redes privadas y que se conecten con el exterior, es el típo de red por defecto.

Red host los contenedores que pertenecen a la red host no se pueden ver entre sí solo se pueden comunicar al contenedor principal de la red host.

none driver null es un contenedor que no tiene red.

$ docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS                        PORTS                     NAMES
9ef2341d634e   7c6d73bed103   "npm --no-update-not…"   16 hours ago   Exited (255) 11 minutes ago   0.0.0.0:32768->1880/tcp   nodered-hvpc
35b954ba4cf6   7c6d73bed103   "npm --no-update-not…"   16 hours ago   Exited (255) 11 minutes ago   0.0.0.0:32769->1880/tcp   nodered-x6p3
ef3b63ded848   nginx          "/docker-entrypoint.…"   40 hours ago   Exited (255) 21 hours ago     0.0.0.0:8080->80/tcp      nginx2
cbb83d45f02f   nginx          "/docker-entrypoint.…"   40 hours ago   Exited (255) 21 hours ago     0.0.0.0:32768->80/tcp     sharp_neumann
26630210bdea   ubuntu         "bash"                   3 days ago     Exited (0) 3 days ago                                   gallant_booth
ff533263ae17   ubuntu         "bash"                   3 days ago     Exited (0) 3 days ago                                   gracious_blackwell
2a7146294762   ubuntu         "bash"                   3 days ago     Created                                                 vigilant_volhard
d18394251999   ubuntu         "sh -c 'while true; …"   3 days ago     Exited (255) 40 hours ago                               bold_keldysh


$ docker start ef3b63ded848
$ docker start sharp_neumann

$ docker inspect nginx2 | grep IPAd
➜  Docker git:(main) ✗ docker inspect nginx1 | grep IPAd

"SecondaryIPAddresses": null,
"IPAddress": "172.17.0.2",
"IPAddress": "172.17.0.2",

$ docker inspect sharp_neumann | grep IPAd
"SecondaryIPAddresses": null,
"IPAddress": "172.17.0.3",
"IPAddress": "172.17.0.3",

$ docker run -d --name nginx3 -p 9080:80 nginx 
1b888f412272fb175dda54f4707d9ad66d08e16cbd6355dc508171ab2cc891a1

$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS          PORTS                   NAMES
1b888f412272   nginx     "/docker-entrypoint.…"   7 seconds ago   Up 6 seconds    0.0.0.0:9080->80/tcp    nginx3
ef3b63ded848   nginx     "/docker-entrypoint.…"   40 hours ago    Up 38 minutes   0.0.0.0:8080->80/tcp    nginx2
cbb83d45f02f   nginx     "/docker-entrypoint.…"   41 hours ago    Up 33 minutes   0.0.0.0:32768->80/tcp   sharp_neumann

$ docker inspect nginx3 | grep IPAd                                                                                                                          
"SecondaryIPAddresses": null,
"IPAddress": "172.17.0.4",
"IPAddress": "172.17.0.4",

$ ping 172.17.0.4
PING 172.17.0.4 (172.17.0.4) 56(84) bytes of data.
64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.076 ms
64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.058 ms
64 bytes from 172.17.0.4: icmp_seq=3 ttl=64 time=0.060 ms


Cada vez que se crea un contenedor se agrega a una misma red.
Los contenedores nginx3, nginx2 y sharp_neumann pertenecen a la misma red.

CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS             PORTS                   NAMES
1b888f412272   nginx     "/docker-entrypoint.…"   33 minutes ago   Up 33 minutes      0.0.0.0:9080->80/tcp    nginx3
ef3b63ded848   nginx     "/docker-entrypoint.…"   41 hours ago     Up About an hour   0.0.0.0:8080->80/tcp    nginx2
cbb83d45f02f   nginx     "/docker-entrypoint.…"   41 hours ago     Up About an hour   0.0.0.0:32768->80/tcp   sharp_neumann

$ docker inspect nginx2
.
.
"NetworkSettings": {
    "Bridge": "",
    "SandboxID": "3b2f136850d6479e637c1dd09970765e9d44825a36c4d8f316ac167ac8980ef0",
    "HairpinMode": false,
    "LinkLocalIPv6Address": "",
    "LinkLocalIPv6PrefixLen": 0,
    "Ports": {
        "80/tcp": [
            {
                "HostIp": "0.0.0.0",
                "HostPort": "8080"
            }
        ]
    },
    "SandboxKey": "/run/snap.docker/netns/3b2f136850d6",
    "SecondaryIPAddresses": null,
    "SecondaryIPv6Addresses": null,
    "EndpointID": "557ae05fcc5a88ec7ce2cc3a265b0203a2a934a10726c338a8bed4743fd5f4c9",
    "Gateway": "172.17.0.1",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "IPAddress": "172.17.0.2",
    
44. Inspeccionar una red
$ docker network

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
046c541c1550   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local


$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "046c541c15503ee0a7771d83b491a9644ddd7a73de480df12911eb456a082f3e",
        "Created": "2021-05-26T15:33:30.947126003Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "1b888f412272fb175dda54f4707d9ad66d08e16cbd6355dc508171ab2cc891a1": {
                "Name": "nginx3",
                "EndpointID": "a74f580c7763542db13ad10a565e21537a3cf7fe1a2a82e54e7854666fbf4a21",
                "MacAddress": "02:42:ac:11:00:04",
                "IPv4Address": "172.17.0.4/16",
                "IPv6Address": ""
            },
            "cbb83d45f02f30f661ca30dc0f932154787e54962a1c0968222bdb41b9b1769b": {
                "Name": "sharp_neumann",
                "EndpointID": "47f775d0bf803b4a458f473e1414c99f0fd150d010ace268af48e0284e9e2453",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "ef3b63ded848347706ad150fbc4b99c878a879d2b9347153bc3bb14c0947921d": {
                "Name": "nginx2",
                "EndpointID": "557ae05fcc5a88ec7ce2cc3a265b0203a2a934a10726c338a8bed4743fd5f4c9",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]


46. Crear una nueva red

$ docker network create --help

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
456b41888b3e   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local

➜  Docker git:(main) ✗ docker network create red1 
5ad6009e6a2a7deda9796135507a26426ae7225c73230cfa36dd8bf8b0efd9f6

➜  Docker git:(main) ✗ docker network ls          
NETWORK ID     NAME      DRIVER    SCOPE
4c51caf988c9   bridge    bridge    local
509cd1aa83d6   host      host      local
df7eae2aff3a   none      null      local
5ad6009e6a2a   red1      bridge    local

➜  Docker git:(main) ✗ nmcli con
NAME                 UUID                                  TYPE      DEVICE          
Conexión cableada 1  81faa571-7eb6-3afd-bfae-2dd5dbe9e179  ethernet  enp2s0          
FAMILIA HINCAPIE     32833099-43b2-4021-8eed-d925e35c22aa  wifi      wlp3s0          
docker0              6242fa26-2f26-40ea-a3ad-fdcae44e8db3  bridge    docker0         
br-5ad6009e6a2a      85d6aa25-31da-4af8-ad73-66dc848268ef  bridge    br-5ad6009e6a2a 
Alicia               0553e58e-1467-479d-b3e4-92f57b50f2e0  wifi      --              
ARRIS-ECDF           7dbbc936-176b-4513-b299-2c58a71a7085  wifi      --              
ARRIS-ECDF-5G        b5645dc4-31d8-4313-8823-10a7ce5a8b10  wifi      --              
famihincapie         b11dc8c5-7c2a-4b31-9304-1e5a9b4f7a50  wifi      --              
Familia hincapie     68580a66-8ee1-4167-8824-2c3433a09e8d  wifi      --              
FAMILIA PATINO       b3ae4b31-d6fb-4dc0-b33f-1741064c0f36  wifi      --              
IG_SERVICES          204e7ad3-96e7-4df0-ab05-55adb09a4b6c  wifi      --              
IGWIFI               a317d14c-fe5e-42fd-85c0-a7fd50c10731  wifi      --              
UdeAEstudiantes      b10cc695-4050-42a6-a1cc-473414ff6115  wifi      -- 

$ docker inspect red1
[
    {
        "Name": "red1",
        "Id": "9e716961240b766e8c4fbecd2ba2d7f86020f5ff989c106d867125d5b9027667",
        "Created": "2021-05-28T17:17:57.751350571Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]

$ docker network create --subnet=172.19.0.0/16 red2
$ nmcli con

$ docker inspect red2
[
    {
        "Name": "red2",
        "Id": "e1f6f95171ba650de40b0ec5444257e86c276e761b7919b71ae84b20eccc115f",
        "Created": "2021-05-28T17:37:41.647436702Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.19.0.0/16"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]

47. Asociar contenedores a una red

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
1a87f418bc33   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local
9e716961240b   red1      bridge    local
e1f6f95171ba   red2      bridge    local

# Se lanza un contenedor de nombre ubuntua desde una imagen ubuntu y se asocia a la red llamada red1
$ docker run -it --name ubuntua --network red1 ubuntu

$ docker inspect ubuntua | grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.2",

$ docker run -d --name nginx4 --network red1 nginx

$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES
9f0c1700de43   nginx     "/docker-entrypoint.…"   24 seconds ago   Up 23 seconds   80/tcp    nginx4
7f81ee1abda4   ubuntu    "/bin/bash"              5 minutes ago    Up 5 minutes              ubuntua

$ docker inspect nginx4 | grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.3",

/# apt-get update
/# apt-get install iputils-ping

root@7f81ee1abda4:/# ping 172.18.0.3
PING 172.18.0.3 (172.18.0.3) 56(84) bytes of data.
64 bytes from 172.18.0.3: icmp_seq=1 ttl=64 time=0.080 ms
64 bytes from 172.18.0.3: icmp_seq=2 ttl=64 time=0.067 ms
64 bytes from 172.18.0.3: icmp_seq=3 ttl=64 time=0.066 ms
64 bytes from 172.18.0.3: icmp_seq=4 ttl=64 time=0.067 ms
64 bytes from 172.18.0.3: icmp_seq=5 ttl=64 time=0.070 ms
64 bytes from 172.18.0.3: icmp_seq=6 ttl=64 time=0.067 ms

Asocia la red2 al contenedor ubuntua
$ docker network connect red2 ubuntua

$ docker inspect ubuntua | grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.2",
                    "IPAddress": "172.19.0.2",



$ docker inspect ubuntua | grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.2",
                    

➜  Docker git:(main) ✗ docker network connect red2 ubuntua
➜  Docker git:(main) ✗ docker inspect ubuntua | grep IPAdd 
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.19.0.2",
                    "IPAddress": "172.20.0.2",

# Desconectar de la red2
➜  Docker git:(main) ✗ docker network disconnect red2 ubuntua
➜  Docker git:(main) ✗ docker inspect ubuntua | grep IPAdd   
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.19.0.2",


49. Enlazar contenedores con --link. Con imagen Busybox

# Cuenta todos los contenedores que se tienen
$ docker ps -a | wc -l
12

$ docker ps -q
9f0c1700de43
7f81ee1abda4

$ docker ps -aq
9f0c1700de43
7f81ee1abda4
1b888f412272
9ef2341d634e
35b954ba4cf6
ef3b63ded848
cbb83d45f02f
26630210bdea
ff533263ae17
2a7146294762
d18394251999

#Eliminar todos los contenedores
docker rm `docker ps -aq`

Descarga y ejecuta busybox se inicia la consola iteractiva y se elimina contenedor cuando no se requiere.

# crea un contenedor llamado b1 desde la imagen busybox
$ docker run -it --rm --name b1 busybox

# crea un contenedor llamado b2 desde la imagen busybox
$ docker run -it --rm --name b2 busybox
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.2      c7f8a3b4ce44

# ping 172.17.0.3
PING 172.17.0.3 (172.17.0.3): 56 data bytes
64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.113 ms
64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.083 ms
64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.083 ms
64 bytes from 172.17.0.3: seq=3 ttl=64 time=0.085 ms
64 bytes from 172.17.0.3: seq=4 ttl=64 time=0.084 ms

$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS         PORTS     NAMES
c7f8a3b4ce44   busybox   "sh"      2 minutes ago   Up 2 minutes             b1

$ docker network inspect bridge

$ docker network inspect bridge | grep "Name"
        "Name": "bridge",
                "Name": "b1",




$ docker run -it --rm --name b2 busybox

/ # cat /etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.3      5cd68b86a0f3

/ # ping 172.17.0.2
PING 172.17.0.2 (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.063 ms
64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.082 ms
64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.083 ms

#Crear un contenedor de nombre b3 desde la imagen  busybox y permite crear un enlace con la máquina b1 que tiene cómo alias maquina1.
$ docker run -it --rm --name b3 --link b1:maquina1 busybox

# consulta la ip 
# cat etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.2      maquina1 c7f8a3b4ce44 b1
172.17.0.4      d4206f0c48ad

 # ping maquina1
PING maquina1 (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.094 ms
64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.090 ms
64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.081 ms

# ping b1
PING b1 (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.066 ms
64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.081 ms
64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.080 ms

51. Enlazar contenedores en Redes personalizadas. Con imagen Mysql

CRear un contenedor de MySQl VERSIÓN 5.7

#se crea un contenedor llamado mysql_server desde la imagen mysql:5.7 en modo background (-d) 
que se elimine apenas salga del contenedor (rm) y se le agrega a la red con el nombre red1
$ docker run -d --name mysql_server --rm --network red1 -e MYSQL_ROOT_PASSWORD=secret mysql:5.7

#Conectandose con el anterior contenedor
$ docker exec -it mysql_server bash
root@ce6bad565b4a:/# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.7.34 MySQL Community Server (GPL)

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)


Creación de un contenedor cliente que se conecta al servidor mysql_server
No es necesario de hacer link cuando se crea un contenedor este crea un dns con los nombres
de las máquinas (mysql_server).

# Se crea otro contenedor iteractivo de nombre mysql_client desde la imagen mysql:5.7
# se le agrega a la red llamada red1 y se lanza el comando bash
$ docker run -it --name mysql_client --rm --network red1 mysql:5.7 bash

# se intanta conectar a la base de datos remota mysql_server  (-h) con el usuario root
root@878c4c252476:/# mysql -h mysql_server -u root -p
Enter password: secret
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.7.34 MySQL Community Server (GPL)

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql> 


53. Ejemplo enlazar contenedores. WordPress y Mysql


# Crear un contenedor de my_sql para wordpress
➜  Docker git:(main) docker run -d --name mysql_wp --rm --network red1 -e MYSQL_ROOT_PASSWORD=secret mysql:5.7

# Crear un contenedor de wordpress dentro de la red red1 que se conecta a la base de datos mysql dentro del contenedor mysql_wp
➜  Docker git:(main) ✗ docker run -d --name wp --rm --network red1 -e WORDPRESS_DB_HOST=mysql_wp -e WORDPRESS_DB_PASSWORD=secret -p 8080:80 wordpress:4.9.1-php5.6-apache

# Inspecciono al contenedor mysql_wp
➜  Docker git:(main) ✗ docker exec -it mysql_wp bash
root@6f923507d4c4:/# mysql -u root -p
Enter password: 
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)
root@6f923507d4c4:/# mysql -u root -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.7.36 MySQL Community Server (GPL)

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| wordpress          |
+--------------------+
5 rows in set (0.00 sec)

55. Borrar una red
# Listar las redes en funcionamiento
➜  Docker git:(main) ✗ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
e6b4e34fc5fa   bridge    bridge    local
509cd1aa83d6   host      host      local
df7eae2aff3a   none      null      local
207266d096ca   red1      bridge    local
65c94617f560   red2      bridge    local

# INtento de borrar una red 
➜  Docker git:(main) ✗ docker network rm red1
Error response from daemon: error while removing network: network red1 id 207266d096ca2efd681b11854f711b31af63d61e908fa273fb140830143f8e1c has active endpoints
➜  Docker git:(main) ✗ docker stop wp
wp
➜  Docker git:(main) ✗ docker stop mysql_wp
mysql_wp

# Se verifica el borrado debido a que cuando fueron creados los contenedores tenía el atributo --rm
➜  Docker git:(main) ✗ docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

# Ya se puede borar sin ningun problema
➜  Docker git:(main) ✗ docker network rm red1
red1

56. Conceptos de volúmenes
57. Crear un volumen en un contenedor

# ES un directorio que se mantiene de forma automática por Docker. No SE DEBE TOCAR
$ cd /var/lib/docker
$ sudo -s
$ ls -lt
total 44
drwx------ 2 root root 4096 Jun 23 18:30 tmp
drwx-----x 3 root root 4096 Jun 23 18:30 overlay2
drwx-----x 2 root root 4096 Jun 23 18:30 volumes
drwx------ 2 root root 4096 Jun 23 18:30 runtimes
drwx--x--x 4 root root 4096 Jun 21 11:04 buildkit
drwx------ 2 root root 4096 Jun 21 11:04 swarm
drwxr-x--- 3 root root 4096 Jun 21 11:04 network
drwx------ 2 root root 4096 Jun 21 11:04 trust
drwx------ 3 root root 4096 Jun 21 11:04 image
drwx------ 4 root root 4096 Jun 21 11:03 plugins
drwx-----x 2 root root 4096 Jun 21 11:03 containers

$ pwd
/var/lib/docker/volumes

# Crear un contenedor con un volumen almacenado en la carpeta /var/lib/docker/volumes/datos
$ docker run -it -v /datos --name ubuntu1 ubuntu bash
root@1cf7b7feb2d0:/# ls -lt
drwxr-xr-x   5 root root  360 Jun 23 20:23 dev
dr-xr-xr-x  13 root root    0 Jun 23 20:23 sys
dr-xr-xr-x 185 root root    0 Jun 23 20:23 proc
drwxr-xr-x   2 root root 4096 Jun 23 20:23 datos
drwxr-xr-x   1 root root 4096 Jun 23 20:23 etc


root@carlos-VivoBook-15-ASUS-Laptop-X542UF:/var/lib/docker/volumes# ls -lt
total 28
drwx-----x 3 root root   4096 Jun 23 20:23 446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69
-rw------- 1 root root  32768 Jun 23 20:23 metadata.db
brw------- 1 root root 202, 1 Jun 23 18:30 backingFsBlockDev



:/var/lib/docker/volumes/446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69/_data $ ls

root@1cf7b7feb2d0:/datos# touch miFile.txt
root@1cf7b7feb2d0:/datos# echo "Hola" > miFile.txt 
root@1cf7b7feb2d0:/datos# cat miFile.txt 
Hola

:/var/lib/docker/volumes/446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69/_data $ ls
miFile.txt

--------------------

root@1cf7b7feb2d0:/datos# exit
exit
:~/environment $ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

:/var/lib/docker/volumes/446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69/_data $ ls
miFile.txt

-----------------------------------------------------

:~/environment $ docker start -i ubuntu1
root@1cf7b7feb2d0:/# cd datos
root@1cf7b7feb2d0:/datos# ls
miFile.txt
root@1cf7b7feb2d0:/datos# 




58. Visualizar información de volúmenes

# Se pueden ver los volumenes creados 
$ docker volume ls
DRIVER    VOLUME NAME
local     446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69

$ docker volume inspect 446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69
[
    {
        "CreatedAt": "2021-06-23T20:47:09Z",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69/_data",
        "Name": "446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69",
        "Options": null,
        "Scope": "local"
    }
]


60. Crear un directorio compartido con el host
Se crea una imagen de docker de nombre ubuntu2 desde la imagen ubuntu con un volumen que reside
en la máquina local en la dirección /home/carlos/Proyectos/Docker/dir1 y dentro de la imagen en /dir1
➜  Docker git:(main) ✗ docker run -it -v /home/carlos/Proyectos/Docker/dir1:/dir1 --name ubuntu2 ubuntu
root@ee059a6b13d5:/dir1# 
root@ee059a6b13d5:/dir1# touch f1

carlos:~/environment/dir1 (main) $ ls
f1

carlos:~/environment/dir1 (main) $ touch f2fromhost
root@ee059a6b13d5:/dir1# ls
f1  f2fromhost


61. Compartir volúmenes entre contenedores

# Se crea una imagen de nombre ubuntu4 con un volumen llamado /datos en el contenedor 
➜  Docker git:(main) ✗ docker run -it -v /datos --name ubuntu4 ubuntu bash
root@a0c815a56ea1:/# cd datos
root@a0c815a56ea1:/datos# touch f1.txt
root@a0c815a56ea1:/datos# ls -lt
total 0
-rw-r--r-- 1 root root 0 Dec 12 20:25 f1.txt
root@a0c815a56ea1:/datos# 

Se crea el contenedor de nombre ubuntu5 y utiliza el mismo volumen que ubuntu4
➜  Docker git:(main) docker run -it --name ubuntu5 --volumes-from ubuntu4 ubuntu bash
root@7b47cdfdcdc0:/# cd datos
root@7b47cdfdcdc0:/datos# ls -lt
total 0
-rw-r--r-- 1 root root 0 Dec 12 20:25 f1.txt
root@7b47cdfdcdc0:/datos#

# LOS VOLUMENES SEGUIRAN EXISTIENDO MIENTRAS EXISTAN IMAGENES QUE APUNTAN A ELLOS
# EL ÚLTIMO VOLUMEN CREADO FUE cd89f111792c1b3015c49d6fa23e32955d62410d67df551613d64f1678f6423a
➜  Docker git:(main) ✗ docker volume ls
DRIVER    VOLUME NAME
local     0a43361b56d212496c9a13cd596c78bd1c6dfac006e7d284771991a342ae5f3f
local     0e620859b67420fb2a624c4cbec47e86a339ce28664eb3375d56b69cd92f717a
local     3a3fb0f99497a69cfe61b339f9bd120811337e1c821ce53b5dca0fee41b3df45
local     70dc88dce7729464a18407ace8d9c462a6b904b8fcfebe7b40b8199851fb32f8
local     75a76427ce7529b3754f71bc47c126a349cfe7822a2dd8277941956139c6b781
local     95a77317c53a792ee4d94819151cc67e8778804acbf1255a114db61182036a5d
local     8833c46242a64d27bfd0738c21321f840cbdea119215fa666e4295ee8f133b64
local     cd89f111792c1b3015c49d6fa23e32955d62410d67df551613d64f1678f6423a

# Sí paramos los dos contenedores todavía sigue existeindo el volumen cd89f111792c1b3015c49d6fa23e32955d62410d67df551613d64f1678f6423a
➜  Docker git:(main) ✗ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
➜  Docker git:(main) ✗ docker volume ls
DRIVER    VOLUME NAME
local     0a43361b56d212496c9a13cd596c78bd1c6dfac006e7d284771991a342ae5f3f
local     0e620859b67420fb2a624c4cbec47e86a339ce28664eb3375d56b69cd92f717a
local     3a3fb0f99497a69cfe61b339f9bd120811337e1c821ce53b5dca0fee41b3df45
local     70dc88dce7729464a18407ace8d9c462a6b904b8fcfebe7b40b8199851fb32f8
local     75a76427ce7529b3754f71bc47c126a349cfe7822a2dd8277941956139c6b781
local     95a77317c53a792ee4d94819151cc67e8778804acbf1255a114db61182036a5d
local     8833c46242a64d27bfd0738c21321f840cbdea119215fa666e4295ee8f133b64
local     cd89f111792c1b3015c49d6fa23e32955d62410d67df551613d64f1678f6423a

➜  Docker git:(main) ✗ docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED             STATUS                      PORTS     NAMES
7b47cdfdcdc0   ubuntu    "bash"    30 minutes ago      Exited (0) 20 minutes ago             ubuntu5
a0c815a56ea1   ubuntu    "bash"    34 minutes ago      Exited (0) 20 minutes ago             ubuntu4
296ccac8343e   ubuntu    "bash"    About an hour ago   Exited (0) 53 minutes ago             ubuntu2
80aa381ba3f1   ubuntu    "bash"    20 hours ago        Exited (0) 19 hours ago               ubuntu1
# Se borran los contenedores ubuntu5 y ubuntu4, entonces el volumen cd89f111792c1b3015c49d6fa23e32955d62410d67df551613d64f1678f6423a
# ya no es utilizable
➜  Docker git:(main) ✗ docker rm ubuntu5
ubuntu5
➜  Docker git:(main) ✗ docker rm ubuntu4
ubuntu4
➜  Docker git:(main) ✗ docker ps -a     
CONTAINER ID   IMAGE     COMMAND   CREATED             STATUS                      PORTS     NAMES
296ccac8343e   ubuntu    "bash"    About an hour ago   Exited (0) 54 minutes ago             ubuntu2
80aa381ba3f1   ubuntu    "bash"    20 hours ago        Exited (0) 19 hours ago               ubuntu1
➜  Docker git:(main) ✗ 

# Se pueden borrar los volumenes que no estan asociados a una imagen
➜  Docker git:(main) ✗ docker volume rm `docker volume ls -q`                                         
0a43361b56d212496c9a13cd596c78bd1c6dfac006e7d284771991a342ae5f3f
0e620859b67420fb2a624c4cbec47e86a339ce28664eb3375d56b69cd92f717a
3a3fb0f99497a69cfe61b339f9bd120811337e1c821ce53b5dca0fee41b3df45
70dc88dce7729464a18407ace8d9c462a6b904b8fcfebe7b40b8199851fb32f8
95a77317c53a792ee4d94819151cc67e8778804acbf1255a114db61182036a5d
8833c46242a64d27bfd0738c21321f840cbdea119215fa666e4295ee8f133b64
75a76427ce7529b3754f71bc47c126a349cfe7822a2dd8277941956139c6b781
cd89f111792c1b3015c49d6fa23e32955d62410d67df551613d64f1678f6423a

63. Crear un volumen independiente

#Crear un volumen con un nombre partícular
➜  Docker git:(main) docker volume create vol1  
vol1
➜  Docker git:(main) docker volume ls
DRIVER    VOLUME NAME
local     vol1

➜  Docker git:(main) docker volume inspect vol1
[
    {
        "CreatedAt": "2021-06-29T18:59:50Z",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/vol1/_data",
        "Name": "vol1",
        "Options": {},
        "Scope": "local"
    }
]

# Se crea un volumen de nombre ubuntu7 y se le asocia el volumen vol1 con el directorio /dir1 dentro
# de la imagen
➜  Docker git:(main) docker run -it --name ubuntu7 -v vol1:/dir1 ubuntu bash
root@c82b88699794:/# ls
bin  boot  dev  dir1  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@c82b88699794:/# cd dir1
root@c82b88699794:/dir1# touch f1

carlos:~/environment (main) $ cd /var/lib/docker/volumes
carlos:/var/lib/docker/volumes $ sudo -s
:/var/lib/docker/volumes $ ls
backingFsBlockDev  metadata.db  vol1
:/var/lib/docker/volumes/vol1/_data $ ls
f1


# El mismo volumne puede ser compartido con otro contenedor
➜  Docker git:(main) ✗ docker run -it --name ubuntu8 -v vol1:/dir1 ubuntu bash
root@8e07a27d564e:/# cd dir1
root@8e07a27d564e:/dir1# ls -lt
total 0
-rw-r--r-- 1 root root 0 Dec 12 21:40 f1.txt
root@8e07a27d564e:/dir1# 

# Compartiendo el mismo volumen, la carpeta datos es de solo lectura.
carlos:~/environment (main) $ docker run -it --name ubuntu9 -v vol1:/datos:ro ubuntu bash


64. Borrar un volumen
carlos:~/environment (main) $ docker volume rm vol1
Error response from daemon: remove vol1: volume is in use - [c82b88699794398987a857ee62c4f42dd5bd150278b781599f0f9202d30ed1e9, 254e710dda6b95f2cf1b7253c7ca30c4ecf6a2db9c405b896d1233b69da3e4a6]

Elimina volumenes sin usar
carlos:~/environment (main) $ docker volume prune


67. Modificar un contenedor
$ docker run -it --name ubuntu1 ubuntu bash
root@e63a005cde07:/# apt-get update
root@e63a005cde07:/# apt-get install wget
carlos:~/environment (main) $ docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS                      PORTS     NAMES
e63a005cde07   ubuntu    "bash"    7 minutes ago   Exited (0) 14 seconds ago             ubuntu1


carlos:~/environment (main) $ docker start -i ubuntu1
root@e63a005cde07:/# wget
wget: missing URL
Usage: wget [OPTION]... [URL]...

Try `wget --help' for more options.

#Dice los cambios que ha tenido este contenedor
carlos:~/environment (main) $ docker diff ubuntu1
C /root
A /root/.bash_history
A /index.html
A /index.html.1
C /usr
C /usr/local
C /usr/local/share
A /usr/local/share/ca-certificates
C /usr/share
C /usr/share/doc
A /usr/share/doc/libssl1.1
A /usr/share/doc/libssl1.1/changelog.Debian.gz
A /usr/share/doc/libssl1.1/copyright


68. Docker commit. Crear una imagen manualmente

# Crea la imagen llamada mi_ubuntu desde el contenedor modificado ubuntu1
➜  Docker git:(main) docker commit ubuntu1 mi_ubuntu                                                                                                                                         
sha256:3587aedb13bcee1cc29bd1bfb5293f2ad7a29fedfc36b03f7e9681374a748953

carlos:~/environment (main) $ docker images
REPOSITORY   TAG       IMAGE ID       CREATED          SIZE
mi_ubuntu    latest    3587aedb13bc   28 seconds ago   110MB
ubuntu       latest    9873176a8ff5   2 weeks ago      72.7MB

# Creo un contenedor desde la imagen recien creada mi_ubuntu
carlos:~/environment (main) $ docker run -it mi_ubuntu bash
root@670298ad049c:/# wget
wget: missing URL
Usage: wget [OPTION]... [URL]...

Try `wget --help' for more options.
root@670298ad049c:/# 


69. Dockerfile
70. Crear una imagen de un Dockerfile

# Archivo Dockefile dentro de la carpeta ./Docker/Docker/imagen_python/Dockerfile_0
# Cargue de la imagen inicial
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python

# Se ejecutan las instrucciones del archivo Dockerfile -t imagen_python crea una imagen de nombre imagen_python
➜  Dockerfile_0 git:(main) ✗ docker build -t imagen_python .


carlos:~/environment/Docker/imagen_python (main) $ docker images
REPOSITORY      TAG       IMAGE ID       CREATED          SIZE
imagen_python   latest    e872741f236e   4 minutes ago    138MB
mi_ubuntu       latest    3587aedb13bc   35 minutes ago   110MB
ubuntu          latest    9873176a8ff5   2 weeks ago      72.7MB

➜  Dockerfile_0 git:(main) ✗ docker run -it imagen_python python
Python 2.7.18 (default, Mar  8 2021, 13:02:45) 
[GCC 9.3.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 

71. RUN

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

➜  Dockerfile_1 git:(main) ✗  $ docker image history imagen_python
IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT
e872741f236e   6 days ago    /bin/sh -c apt-get install -y python            36.4MB    
22d14bd65edf   6 days ago    /bin/sh -c apt-get update                       29.3MB    
9873176a8ff5   3 weeks ago   /bin/sh -c #(nop)  CMD ["bash"]                 0B        
<missing>      3 weeks ago   /bin/sh -c #(nop) ADD file:920cf788d1ba88f76…   72.7MB  


➜  Dockerfile_1 git:(main) ✗  $ docker build -t imagen_python:v1 .

carlos:~/environment/Docker/imagen_python (main) $ docker images
REPOSITORY      TAG       IMAGE ID       CREATED         SIZE
imagen_python   v1        801f7994a98f   3 minutes ago   235MB
imagen_python   latest    e872741f236e   6 days ago      138MB
mi_ubuntu       latest    3587aedb13bc   6 days ago      110MB
ubuntu          latest    9873176a8ff5   3 weeks ago     72.7MB


➜  Dockerfile_1 git:(main)  docker run -it --rm imagen_python:v1 bash
root@15a4ffaa64b9:/# ls
bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

root@15a4ffaa64b9:/# cat /etc/version                                                                                                                                                                   
1.0

root@15a4ffaa64b9:/# git
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]



72. CMD

CMD permite indicar el comando por defecto del contenedor
DEntro de un docker file solo puede haber un CMD
# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
CMD echo "Welcome to this container"

➜  Dockerfile_2 git:(main) $ docker build -t image:v1 .

carlos:~/environment/Docker/imagen_python (main) $  docker images
REPOSITORY      TAG       IMAGE ID       CREATED          SIZE
image           v1        95023b47cd91   24 seconds ago   235MB
imagen_python   v1        801f7994a98f   21 hours ago     235MB
imagen_python   latest    e872741f236e   7 days ago       138MB
mi_ubuntu       latest    3587aedb13bc   7 days ago       110MB
ubuntu          latest    9873176a8ff5   3 weeks ago      72.7MB

➜  Dockerfile_2 git:(main) $ docker run -it --rm image:v1                                                                                                                         
Welcome to this container

carlos:~/environment/Docker/imagen_python (main) $ docker rmi image:v1
Untagged: image:v1
Deleted: sha256:95023b47cd918f3b9d1a62ae5345664fa9a249b5475ec78cbf3561d33638a2a7

------

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
CMD ["echo","Welcome to this container"]


carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 .
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1                                                                                                                         
Welcome to this container

carlos:~/environment/Docker/imagen_python (main) $ docker image history image:v1
IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT
95d14947c473   3 minutes ago   /bin/sh -c #(nop)  CMD ["echo" "Welcome to t…   0B        
801f7994a98f   21 hours ago    /bin/sh -c echo 1.0 >> /etc/version && apt-g…   96.6MB    
e872741f236e   7 days ago      /bin/sh -c apt-get install -y python            36.4MB    
22d14bd65edf   7 days ago      /bin/sh -c apt-get update                       29.3MB    
9873176a8ff5   3 weeks ago     /bin/sh -c #(nop)  CMD ["bash"]                 0B        
<missing>      3 weeks ago     /bin/sh -c #(nop) ADD file:920cf788d1ba88f76…   72.7MB  



# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
CMD /bin/bash

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 . 
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1
root@8b4a0866a8de:/# 

carlos:~/environment/Docker/imagen_python (main) $ docker image history image:v1
IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT
f977cfbe0722   2 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        
801f7994a98f   22 hours ago    /bin/sh -c echo 1.0 >> /etc/version && apt-g…   96.6MB    
e872741f236e   7 days ago      /bin/sh -c apt-get install -y python            36.4MB    
22d14bd65edf   7 days ago      /bin/sh -c apt-get update                       29.3MB    
9873176a8ff5   3 weeks ago     /bin/sh -c #(nop)  CMD ["bash"]                 0B        
<missing>      3 weeks ago     /bin/sh -c #(nop) ADD file:920cf788d1ba88f76…   72.7MB  



# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
CMD ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 . 
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1
root@8b4a0866a8de:/# 

carlos:~/environment/Docker/imagen_python (main) $ docker image history image:v1                                                                                                                        
IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT
e04f77470b66   20 seconds ago   /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B        
801f7994a98f   22 hours ago     /bin/sh -c echo 1.0 >> /etc/version && apt-g…   96.6MB    
e872741f236e   7 days ago       /bin/sh -c apt-get install -y python            36.4MB    
22d14bd65edf   7 days ago       /bin/sh -c apt-get update                       29.3MB    
9873176a8ff5   3 weeks ago      /bin/sh -c #(nop)  CMD ["bash"]                 0B        
<missing>      3 weeks ago      /bin/sh -c #(nop) ADD file:920cf788d1ba88f76…   72.7MB


73. ENTRYPOINT

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
ENTRYPOINT ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 .
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1 df -h
/usr/bin/df: /usr/bin/df: cannot execute binary file

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1
root@e05d77184bb3:/# 


# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
ENTRYPOINT ["df"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 .

# Puede agregar comandos
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1 -h                                                                                                                      
Filesystem      Size  Used Avail Use% Mounted on
overlay          30G  6.5G   23G  23% /
tmpfs            64M     0   64M   0% /dev
tmpfs           490M     0  490M   0% /sys/fs/cgroup
shm              64M     0   64M   0% /dev/shm
/dev/xvda1       30G  6.5G   23G  23% /etc/hosts
tmpfs           490M     0  490M   0% /proc/acpi
tmpfs           490M     0  490M   0% /proc/scsi
tmpfs           490M     0  490M   0% /sys/firmware

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
ENTRYPOINT ["/bin/bash"]

➜  Dockerfile_3 git:(main) ✗ docker build -t image:v2 .  

➜  Dockerfile_3 git:(main) ✗ docker run -it --rm image:v2      
root@a5e5ff708f30:/# 

➜  Dockerfile_3 git:(main) ✗ docker run -it --rm image:v2 df -h
/usr/bin/df: /usr/bin/df: cannot execute binary file


74. WORKDIR

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v3 .
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v3
root@6f6b5a7c91e0:/datos1# 

75. COPY-ADD

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v4 .
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v4

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v4
root@532936181c4c:/datos1# ls
f2.txt  index.html
root@532936181c4c:/datos1# 



tar cvf f.tar f1 f2 f3 f4 f5

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ADD##
ADD docs docs
ADD f* /datos/

# Copia el contenido de f.tar (desempaqueta) al directorio por defecto, /datos1
ADD f.tar .

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v5 .

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v5
root@f6a68068c9ce:/datos1# ls
docs  f1  f2  f2.txt  f3  f4  f5  index.html
root@f6a68068c9ce:/datos1# cd /datos
root@f6a68068c9ce:/datos# ls
app.log  f1  f1.txt  f2  f3  f4  f5



76. ENV

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v4
root@ebb2d2a066e6:/datos1# env
HOSTNAME=ebb2d2a066e6
PWD=/datos1
HOME=/root
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
LESSCLOSE=/usr/bin/lesspipe %s %s
TERM=xterm
LESSOPEN=| /usr/bin/lesspipe %s
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env


carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm --env x=10 image:v4
root@e8e7916d1dc8:/datos1# env
HOSTNAME=e8e7916d1dc8
PWD=/datos1
x=10
HOME=/root
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
LESSCLOSE=/usr/bin/lesspipe %s %s
TERM=xterm
LESSOPEN=| /usr/bin/lesspipe %s
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env
root@e8e7916d1dc8:/datos1#

root@e8e7916d1dc8:/datos1# echo $x
10

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm --env x=`pwd` image:v4                                                                                                                                                        
root@e4a536cdd75f:/datos1#
root@e4a536cdd75f:/datos1# echo $x                                                                                                                                                                                                                   
/home/ubuntu/environment/Docker/imagen_python

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ADD##
ADD docs docs
ADD f* /datos/

# Copia el contenido de f.tar (desempaqueta) al directorio por defecto, /datos1
ADD f.tar .

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

##ENV##
ENV dir=/data dir1=/data1
RUN mkdir $dir && mkdir $dir1

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v5 .

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v5
root@0b94b8acf788:/datos1#
root@0b94b8acf788:~# cd /
root@0b94b8acf788:/# ls
bin  boot  data  data1  dato1  datos  datos1  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

root@0b94b8acf788:/# env
HOSTNAME=0b94b8acf788
PWD=/
HOME=/root
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
dir1=/data1
LESSCLOSE=/usr/bin/lesspipe %s %s
TERM=xterm
LESSOPEN=| /usr/bin/lesspipe %s
dir=/data
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env
OLDPWD=/data1
root@0b94b8acf788:/# 

77. ARG

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ADD##
ADD docs docs
ADD f* /datos/

# Copia el contenido de f.tar (desempaqueta) al directorio por defecto, /datos1
ADD f.tar .

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

##ENV##
ENV dir=/data dir1=/data1
RUN mkdir $dir && mkdir $dir1


##ARG##
ARG dir2
RUN mkdir $dir2

$ docker build -t image:v6 --build-arg dir2=/data2 .  
root@822c4432cd08:/# ls /
$ docker run -it --rm image:v6
bin  boot  data  data1  data2  dato1  datos  datos1  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var


# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ADD##
ADD docs docs
ADD f* /datos/

# Copia el contenido de f.tar (desempaqueta) al directorio por defecto, /datos1
ADD f.tar .

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

##ENV##
ENV dir=/data dir1=/data1
RUN mkdir $dir && mkdir $dir1



##ARG##
ARG dir2
RUN mkdir $dir2
ARG user
ENV user_docker $user
ADD add_user.sh /datos1
RUN /datos1/add_user.sh

# add_user.sh
adduser $user_docker 

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v6 --build-arg dir2=/data2 --build-arg user=augusto . 
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v6
root@561cbc35c470:/datos1# cat /etc/passwd
.
.
.
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
augusto:x:1000:1000:,,,:/home/augusto:/bin/bash

83. Subir imágenes a Docker Hub
docker login
username: solrac2013
pass: Colombia2020

➜  imagen_python git:(main) docker image tag image:v10 solrac2013/image:v10
➜  imagen_python git:(main) docker push solrac2013/image:v10
➜  imagen_python git:(main) docker image tag image:v10 solrac2013/image:latest
➜  imagen_python git:(main) docker push solrac2013/image:latest
➜  imagen_python git:(main) docker rmi `docker images -q`
➜  imagen_python git:(main) docker pull solrac2013/image


84. Integración continua. Ejemplo: Conectar DockerHub y GIthub de forma automática
89. Mi primer proyecto Compose

# Inicia los contenedores programados en el archivo docker-compose.yml
➜  pr_nginx git:(main) docker-compose up

➜  Docker git:(main) ✗ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMES
b2e6e223e60d   nginx     "/docker-entrypoint.…"   2 minutes ago   Up 2 minutes   0.0.0.0:80->80/tcp, :::80->80/tcp   pr_nginx_nginx_1

➜  Docker git:(main) ✗ docker network ls
NETWORK ID     NAME                     DRIVER    SCOPE
d3f56bf79207   bridge                   bridge    local
509cd1aa83d6   host                     host      local
df7eae2aff3a   none                     null      local
eb04a41bfd90   pr_nginx_default         bridge    local
68190791f065   recipe-app-api_default   bridge    local
0375276f6012   red2                     bridge    local


pr_nginx git:(main) ✗ docker inspect network pr_nginx_default

[
    {
        "Name": "pr_nginx_default",
        "Id": "eb04a41bfd90615a052059a43dba92aa641894727ddf38d78cb5d99cef4c9239",
        "Created": "2021-08-20T15:53:17.131964858-05:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.19.0.0/16",
                    "Gateway": "172.19.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": true,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "b2e6e223e60d98269071cec746c8b404dd5784ec0d41f2c0e997d72c4e4be92f": {
                "Name": "pr_nginx_nginx_1",
                "EndpointID": "d4b2516de7f7647477407a2cccb4cd6b0ea7eccd3417378f0b37b438169a3d35",
                "MacAddress": "02:42:ac:13:00:02",
                "IPv4Address": "172.19.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {
            "com.docker.compose.network": "default",
            "com.docker.compose.project": "pr_nginx",
            "com.docker.compose.version": "1.26.0"
        }
    }
]

➜  pr_nginx git:(main) ✗ docker-compose ps
      Name                    Command               State                Ports              
--------------------------------------------------------------------------------------------
pr_nginx_nginx_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:80->80/tcp,:::80->80/tcp

# Despues de pararlo

➜  pr_nginx git:(main) ✗ docker-compose ps
      Name                    Command               State    Ports
------------------------------------------------------------------
pr_nginx_nginx_1   /docker-entrypoint.sh ngin ...   Exit 0

# Con este comando se paran los dos contenedores
➜  Docker git:(main) ✗ docker-compose stop

# Permite verlos contenedores y su estado
➜  worpress git:(main) ✗ docker-compose ps

# Permite ve las imagenes y sus detalles
➜  worpress git:(main) ✗ docker-compose images

# Examina el archivo de configuración de compose
➜  worpress git:(main) ✗ docker-compose config

➜  worpress git:(main) ✗ docker-compose config --help
Options:
    --resolve-image-digests  Pin image tags to digests.
    --no-interpolate         Don't interpolate environment variables
    -q, --quiet              Only validate the configuration, don't print
                             anything.
    --services               Print the service names, one per line.
    --volumes                Print the volume names, one per line.
    --hash="*"               Print the service config hash, one per line.
                             Set "service1,service2" for a list of specified services
                             or use the wildcard symbol to display all services


➜  worpress git:(main) ✗ docker-compose config --services
mysql
wordpress

# Log del servicio mysql
➜  worpress git:(main) ✗ docker-compose logs mysql

# Log del servicio wordpress
➜  worpress git:(main) ✗ docker-compose logs wordpress

# Log de los proceso de wordpress
➜  worpress git:(main) ✗ docker-compose top wordpress

➜  worpress git:(main) ✗ docker-compose unpause
Unpausing wordpress-blog ... done
Unpausing mysql-db       ... done

#Reinicia los servidores
➜  worpress git:(main) ✗ docker-compose restart  


# Elimina las imagenes
➜  worpress git:(main) ✗ docker-compose rm  
Going to remove wordpress-blog, mysql-db
Are you sure? [yN] y
Removing wordpress-blog ... done
Removing mysql-db       ... done



example-volumes git:(main) ✗ docker-compose config --services
web
db

➜  example-volumes git:(main) ✗ docker-compose exec web sh
/ # ls
bin                   etc                   opt                   srv
data                  home                  proc                  sys
dev                   lib                   root                  tmp
docker-entrypoint.d   media                 run                   usr
docker-entrypoint.sh  mnt                   sbin                  var
/ # cd opt/app/static
/opt/app/static # ls
f1

docker-compose down: es lo contrario al comando "docker-compose up" baja los
servicios y elimina los conenedores, las redes y elimina las imagenes
➜  example-volumes git:(main) ✗ docker-compose down

Elimina de manera definitiva los volumenes
➜  example-volumes git:(main) ✗ docker volume prune 

