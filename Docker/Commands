$ docker --version
$ docker info

Muestra las imagenes
$ docker images

Muestra los contenedores
$ docker ps
$ docker ps -a
$ docker ps --help
$ docker ps -l
$ docker ps -n 4
$ docker ps -a -q

Muestra las imagenes
$ docker images --help
$ docker images -a
$ docker images -a -q

delete all stop
$ docker system prune -a

Crear y ejecuta un contenedor nuevo en forma iteractiva
$ docker run -it ubuntu
root@0617fe109b46:/# uname -a

$ docker run -it --name mi_ubutu ubuntu # crea un contenedor desde la imagen ubuntu con nombre mi_ubuntu
root@a9abe5654cf0:/#

$ docker run -it --name mi_ubutu ubuntu bash # crea un contenedor desde la imagen ubuntu con nombre mi_ubuntu e inicializa el comando bash
root@a9abe5654cf0:/#

Inicializando un contenedor parado
$ docker start -i 0617fe109b46
$ docker start -i 0617

Crear contenedor en background - El contenedor esta funcionando despues de estae comando
$ docker run -d nginx

Desgargar imagen desde Docker Hub
$ docker pull ubuntu:trusty

Crea un contenedor con la imagen trusty ubuntu y entra en mod bash
$ docker run -it ubuntu:trusty bash

Elimina un contenedor
$ docker rm c611
$ docker rm heuristic_cerf


Elimina imagenes
$ docker rmi 13b6
$ docker rmi -f 7e0aa2d69a15 # Fuerza borrado aunque este asociado a una imagen

Ejecutar comandos dentro de las imagenes
$ docker exec mi_ubutu echo hola
hola

$ docker exec a9abe5654cf0  echo hola mundo
hola mundo

$ docker exec -it mi_ubutu bash
root@a9abe5654cf0:/# 

$ docker pull python # Descarga imagen de python
$ docker run -it --name mi_python python # Lanza la imagen de python con el comando python

$ docker exec -it mi_python bash 

Comandos Image
$ docker image ls
$ docker image rm -f ubuntu # Elimina una imagen

Comandos container
$ docker container ls
$ docker container ls --help

Docker Logs y Docker kills

$ docker run -d ubuntu sh -c "while true; do date; done"
$ docker logs bold_keldysh # Permite mirar lo que se esta ejecutando en el contenedor
$ docker logs d18394 --tail 10 # Permite mirar lo que se esta ejecutando en el contenedor, los últimos 10 registros


docker kill bold_keldysh # Terminar un container


Docker Top

docker top 26630210bdea
docker stats d18394251999

Docker inspect

$ docker inspect 26630210bdea

Efectua la inspacción y se envía al archivo containe1.txt
$ docker inspect 26630210bdea > containe1.txt
$ docker inspect 7c6d73bed103 > image1.txt

41. Introducción a los puertos en Docker

Presentación

42. Gestionar Puertos para acceder al contenedor. Ejemplo con
NGINX
$ docker pull nginx
$ docker images

crea el contenedor desde la imagen de nginx y expone todos los puertos publicos
$ docker run -d -P nginx

$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                   NAMES
cbb83d45f02f   nginx     "/docker-entrypoint.…"   56 seconds ago   Up 54 seconds   0.0.0.0:32768->80/tcp   sharp_neumann


0.0.0.0:32768->80/tcp = Puede acceder por cualquier dirección ip de la máquina principal, y utilizar el puerto 32768 para acceder al puerto 80 de nginx.

http://18.188.39.91:32768/

$ docker run -d --name nginx2 -p 8080:80 nginx
$ docker ps

CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                   NAMES
ef3b63ded848   nginx     "/docker-entrypoint.…"   3 minutes ago    Up 3 minutes    0.0.0.0:8080->80/tcp    nginx2
cbb83d45f02f   nginx     "/docker-entrypoint.…"   16 minutes ago   Up 16 minutes   0.0.0.0:32768->80/tcp   sharp_neumann


http://18.188.39.91:8080/


43. Redes en Docker

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
046c541c1550   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local

Red bridge permite que haya redes privadas y que se conecten con el exterior, es el típo de red por defecto.

Red host los contenedores que pertenecen a la red host no se pueden ver entre sí solo se pueden comunicar al contenedor principal de la red host.

none driver null es un contenedor que no tiene red.

$ docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS                        PORTS                     NAMES
9ef2341d634e   7c6d73bed103   "npm --no-update-not…"   16 hours ago   Exited (255) 11 minutes ago   0.0.0.0:32768->1880/tcp   nodered-hvpc
35b954ba4cf6   7c6d73bed103   "npm --no-update-not…"   16 hours ago   Exited (255) 11 minutes ago   0.0.0.0:32769->1880/tcp   nodered-x6p3
ef3b63ded848   nginx          "/docker-entrypoint.…"   40 hours ago   Exited (255) 21 hours ago     0.0.0.0:8080->80/tcp      nginx2
cbb83d45f02f   nginx          "/docker-entrypoint.…"   40 hours ago   Exited (255) 21 hours ago     0.0.0.0:32768->80/tcp     sharp_neumann
26630210bdea   ubuntu         "bash"                   3 days ago     Exited (0) 3 days ago                                   gallant_booth
ff533263ae17   ubuntu         "bash"                   3 days ago     Exited (0) 3 days ago                                   gracious_blackwell
2a7146294762   ubuntu         "bash"                   3 days ago     Created                                                 vigilant_volhard
d18394251999   ubuntu         "sh -c 'while true; …"   3 days ago     Exited (255) 40 hours ago                               bold_keldysh


$ docker start ef3b63ded848
$ docker start sharp_neumann

$ docker inspect nginx2 | grep IPAd

"SecondaryIPAddresses": null,
"IPAddress": "172.17.0.2",
"IPAddress": "172.17.0.2",

$ docker inspect sharp_neumann | grep IPAd
"SecondaryIPAddresses": null,
"IPAddress": "172.17.0.3",
"IPAddress": "172.17.0.3",

$ docker run -d --name nginx3 -p 9080:80 nginx 
1b888f412272fb175dda54f4707d9ad66d08e16cbd6355dc508171ab2cc891a1

$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS          PORTS                   NAMES
1b888f412272   nginx     "/docker-entrypoint.…"   7 seconds ago   Up 6 seconds    0.0.0.0:9080->80/tcp    nginx3
ef3b63ded848   nginx     "/docker-entrypoint.…"   40 hours ago    Up 38 minutes   0.0.0.0:8080->80/tcp    nginx2
cbb83d45f02f   nginx     "/docker-entrypoint.…"   41 hours ago    Up 33 minutes   0.0.0.0:32768->80/tcp   sharp_neumann

$ docker inspect nginx3 | grep IPAd                                                                                                                          
"SecondaryIPAddresses": null,
"IPAddress": "172.17.0.4",
"IPAddress": "172.17.0.4",

$ ping 172.17.0.4
PING 172.17.0.4 (172.17.0.4) 56(84) bytes of data.
64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.076 ms
64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.058 ms
64 bytes from 172.17.0.4: icmp_seq=3 ttl=64 time=0.060 ms


Cada vez que se crea un contenedor se agrega a una misma red.
Los contenedores nginx3, nginx2 y sharp_neumann pertenecen a la misma red.

CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS             PORTS                   NAMES
1b888f412272   nginx     "/docker-entrypoint.…"   33 minutes ago   Up 33 minutes      0.0.0.0:9080->80/tcp    nginx3
ef3b63ded848   nginx     "/docker-entrypoint.…"   41 hours ago     Up About an hour   0.0.0.0:8080->80/tcp    nginx2
cbb83d45f02f   nginx     "/docker-entrypoint.…"   41 hours ago     Up About an hour   0.0.0.0:32768->80/tcp   sharp_neumann

$ docker inspect nginx2
.
.
"NetworkSettings": {
    "Bridge": "",
    "SandboxID": "3b2f136850d6479e637c1dd09970765e9d44825a36c4d8f316ac167ac8980ef0",
    "HairpinMode": false,
    "LinkLocalIPv6Address": "",
    "LinkLocalIPv6PrefixLen": 0,
    "Ports": {
        "80/tcp": [
            {
                "HostIp": "0.0.0.0",
                "HostPort": "8080"
            }
        ]
    },
    "SandboxKey": "/run/snap.docker/netns/3b2f136850d6",
    "SecondaryIPAddresses": null,
    "SecondaryIPv6Addresses": null,
    "EndpointID": "557ae05fcc5a88ec7ce2cc3a265b0203a2a934a10726c338a8bed4743fd5f4c9",
    "Gateway": "172.17.0.1",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "IPAddress": "172.17.0.2",
    
44. Inspeccionar una red
$ docker network

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
046c541c1550   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local


$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "046c541c15503ee0a7771d83b491a9644ddd7a73de480df12911eb456a082f3e",
        "Created": "2021-05-26T15:33:30.947126003Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "1b888f412272fb175dda54f4707d9ad66d08e16cbd6355dc508171ab2cc891a1": {
                "Name": "nginx3",
                "EndpointID": "a74f580c7763542db13ad10a565e21537a3cf7fe1a2a82e54e7854666fbf4a21",
                "MacAddress": "02:42:ac:11:00:04",
                "IPv4Address": "172.17.0.4/16",
                "IPv6Address": ""
            },
            "cbb83d45f02f30f661ca30dc0f932154787e54962a1c0968222bdb41b9b1769b": {
                "Name": "sharp_neumann",
                "EndpointID": "47f775d0bf803b4a458f473e1414c99f0fd150d010ace268af48e0284e9e2453",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "ef3b63ded848347706ad150fbc4b99c878a879d2b9347153bc3bb14c0947921d": {
                "Name": "nginx2",
                "EndpointID": "557ae05fcc5a88ec7ce2cc3a265b0203a2a934a10726c338a8bed4743fd5f4c9",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]


46. Crear una nueva red

$ docker network create --help

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
456b41888b3e   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local


$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
456b41888b3e   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local
9e716961240b   red1      bridge    local

$ docker inspect red1
[
    {
        "Name": "red1",
        "Id": "9e716961240b766e8c4fbecd2ba2d7f86020f5ff989c106d867125d5b9027667",
        "Created": "2021-05-28T17:17:57.751350571Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]

$ docker network create --subnet=172.19.0.0/16 red2

$ docker inspect red2
[
    {
        "Name": "red2",
        "Id": "e1f6f95171ba650de40b0ec5444257e86c276e761b7919b71ae84b20eccc115f",
        "Created": "2021-05-28T17:37:41.647436702Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.19.0.0/16"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]

47. Asociar contenedores a una red

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
1a87f418bc33   bridge    bridge    local
39382b5cf72b   host      host      local
7f083cad8543   none      null      local
9e716961240b   red1      bridge    local
e1f6f95171ba   red2      bridge    local

$ docker run -it --name ubuntua --network red1 ubuntu

$ docker inspect ubuntua | grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.2",

$ docker run -d --name nginx4 --network red1 nginx

$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES
9f0c1700de43   nginx     "/docker-entrypoint.…"   24 seconds ago   Up 23 seconds   80/tcp    nginx4
7f81ee1abda4   ubuntu    "/bin/bash"              5 minutes ago    Up 5 minutes              ubuntua

$ docker inspect nginx4 | grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.3",

/# apt-get update
/# apt-get install iputils-ping

root@7f81ee1abda4:/# ping 172.18.0.3
PING 172.18.0.3 (172.18.0.3) 56(84) bytes of data.
64 bytes from 172.18.0.3: icmp_seq=1 ttl=64 time=0.080 ms
64 bytes from 172.18.0.3: icmp_seq=2 ttl=64 time=0.067 ms
64 bytes from 172.18.0.3: icmp_seq=3 ttl=64 time=0.066 ms
64 bytes from 172.18.0.3: icmp_seq=4 ttl=64 time=0.067 ms
64 bytes from 172.18.0.3: icmp_seq=5 ttl=64 time=0.070 ms
64 bytes from 172.18.0.3: icmp_seq=6 ttl=64 time=0.067 ms

Asocia la red2 al contenedor ubuntua
$ docker network connect red2 ubuntua

$ docker inspect ubuntua | grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.2",
                    "IPAddress": "172.19.0.2",



$ docker inspect ubuntua | grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.18.0.2",
                    






49. Enlazar contenedores con --link. Con imagen Busybox

$ docker ps -a | wc -l
12

$ docker ps -q
9f0c1700de43
7f81ee1abda4

$ docker ps -aq
9f0c1700de43
7f81ee1abda4
1b888f412272
9ef2341d634e
35b954ba4cf6
ef3b63ded848
cbb83d45f02f
26630210bdea
ff533263ae17
2a7146294762
d18394251999

Eliminar todos los contenedores
docker rm `docker ps -aq`

Descarga y ejecuta busybox se inicia la consola iteractiva y se elimina contenedor cuando no se requiere.

$ docker run -it --rm --name b1 busybox
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.2      c7f8a3b4ce44

# ping 172.17.0.3
PING 172.17.0.3 (172.17.0.3): 56 data bytes
64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.113 ms
64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.083 ms
64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.083 ms
64 bytes from 172.17.0.3: seq=3 ttl=64 time=0.085 ms
64 bytes from 172.17.0.3: seq=4 ttl=64 time=0.084 ms

$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS         PORTS     NAMES
c7f8a3b4ce44   busybox   "sh"      2 minutes ago   Up 2 minutes             b1

$ docker network inspect bridge

$ docker network inspect bridge | grep "Name"
        "Name": "bridge",
                "Name": "b1",




$ docker run -it --rm --name b2 busybox

/ # cat /etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.3      5cd68b86a0f3

/ # ping 172.17.0.2
PING 172.17.0.2 (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.063 ms
64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.082 ms
64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.083 ms

Crear un contenedor y permite crear un enlace con el nombre de l máquina y un alias.
$ docker run -it --rm --name b3 --link b1:maquina1 busybox

# cat etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.2      maquina1 c7f8a3b4ce44 b1
172.17.0.4      d4206f0c48ad

 # ping maquina1
PING maquina1 (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.094 ms
64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.090 ms
64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.081 ms

# ping b1
PING b1 (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.066 ms
64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.081 ms
64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.080 ms

51. Enlazar contenedores en Redes personalizadas. Con imagen Mysql

CRear un contenedor de MySQl VERSIÓN 5.7

$ docker run --name mysql_server --rm --network red1 -e MYSQL_ROOT_PASSWORD=secret mysql:5.7

$ docker exec -it mysql_server bash
root@ce6bad565b4a:/# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.7.34 MySQL Community Server (GPL)

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)


Creación de un contenedor cliente que se conecta al servidor mysql_server
No es necesario de hacer link cuando se crea un contenedor este crea un dns con los nombres
de las máquinas (mysql_server).

$ docker run -it --name mysql_client --rm --network red1 mysql:5.7 bash
root@878c4c252476:/# mysql -h mysql_server -u root -p
Enter password: secret
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3
Server version: 5.7.34 MySQL Community Server (GPL)

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql> 




56. Conceptos de volúmenes
57. Crear un volumen en un contenedor
$ cd /var/lib/docker
$ sudo -s
$ ls -lt
total 44
drwx------ 2 root root 4096 Jun 23 18:30 tmp
drwx-----x 3 root root 4096 Jun 23 18:30 overlay2
drwx-----x 2 root root 4096 Jun 23 18:30 volumes
drwx------ 2 root root 4096 Jun 23 18:30 runtimes
drwx--x--x 4 root root 4096 Jun 21 11:04 buildkit
drwx------ 2 root root 4096 Jun 21 11:04 swarm
drwxr-x--- 3 root root 4096 Jun 21 11:04 network
drwx------ 2 root root 4096 Jun 21 11:04 trust
drwx------ 3 root root 4096 Jun 21 11:04 image
drwx------ 4 root root 4096 Jun 21 11:03 plugins
drwx-----x 2 root root 4096 Jun 21 11:03 containers

$ pwd
/var/lib/docker/volumes

Crear un contenedor con un volumen almacenado en la carpeta /datos
$ docker run -it -v /datos --name ubuntu1 ubuntu bash
root@1cf7b7feb2d0:/# ls -lt
drwxr-xr-x   5 root root  360 Jun 23 20:23 dev
dr-xr-xr-x  13 root root    0 Jun 23 20:23 sys
dr-xr-xr-x 185 root root    0 Jun 23 20:23 proc
drwxr-xr-x   2 root root 4096 Jun 23 20:23 datos
drwxr-xr-x   1 root root 4096 Jun 23 20:23 etc


:/var/lib/docker/volumes $ ls -lt
total 28
drwx-----x 3 root root   4096 Jun 23 20:23 446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69
-rw------- 1 root root  32768 Jun 23 20:23 metadata.db
brw------- 1 root root 202, 1 Jun 23 18:30 backingFsBlockDev



:/var/lib/docker/volumes/446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69/_data $ ls

root@1cf7b7feb2d0:/datos# touch miFile.txt
root@1cf7b7feb2d0:/datos# echo "Hola" > miFile.txt 
root@1cf7b7feb2d0:/datos# cat miFile.txt 
Hola

:/var/lib/docker/volumes/446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69/_data $ ls
miFile.txt

--------------------

root@1cf7b7feb2d0:/datos# exit
exit
:~/environment $ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

:/var/lib/docker/volumes/446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69/_data $ ls
miFile.txt

-----------------------------------------------------

:~/environment $ docker start -i ubuntu1
root@1cf7b7feb2d0:/# cd datos
root@1cf7b7feb2d0:/datos# ls
miFile.txt
root@1cf7b7feb2d0:/datos# 




58. Visualizar información de volúmenes

$ docker volume ls
DRIVER    VOLUME NAME
local     446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69

$ docker volume inspect 446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69
[
    {
        "CreatedAt": "2021-06-23T20:47:09Z",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69/_data",
        "Name": "446f64611961e9eeba22929c20a29449cabb91a06349f08c199df3d7780e2f69",
        "Options": null,
        "Scope": "local"
    }
]


60. Crear un directorio compartido con el host
$ docker run -it -v /home/ubuntu/environment/dir1:/dir1 --name ubuntu2 ubuntu
root@ee059a6b13d5:/dir1# 
root@ee059a6b13d5:/dir1# touch f1

carlos:~/environment/dir1 (main) $ ls
f1

carlos:~/environment/dir1 (main) $ touch f2fromhost
root@ee059a6b13d5:/dir1# ls
f1  f2fromhost


61. Compartir volúmenes entre contenedores

Se crea el contenedor ubuntu5 y utiliza el mismo volumen que ubuntu4
$ docker run -it --name ubuntu5 --volumes-from ubuntu4 ubuntu bash




63. Crear un volumen independiente

:/var/lib/docker/volumes $ docker volume create vol1
vol1
:/var/lib/docker/volumes $ ls
backingFsBlockDev  metadata.db  vol1

:/var/lib/docker/volumes $ docker volume inspect vol1
[
    {
        "CreatedAt": "2021-06-29T18:59:50Z",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/vol1/_data",
        "Name": "vol1",
        "Options": {},
        "Scope": "local"
    }
]

:/var/lib/docker/volumes $ docker run -it --name ubuntu7 -v vol1:/dir1 ubuntu bash
root@c82b88699794:/# ls
bin  boot  dev  dir1  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@c82b88699794:/# cd dir1
root@c82b88699794:/dir1# touch f1

carlos:~/environment (main) $ cd /var/lib/docker/volumes
carlos:/var/lib/docker/volumes $ sudo -s
:/var/lib/docker/volumes $ ls
backingFsBlockDev  metadata.db  vol1
:/var/lib/docker/volumes/vol1/_data $ ls
f1


El mismo volumne puede ser compartido con otro contenedor
carlos:~/environment (main) $ docker run -it --name ubuntu8 -v vol1:/dir1 ubuntu bash
root@254e710dda6b:/# cd dir1/
root@254e710dda6b:/dir1# ls
f1
root@254e710dda6b:/dir1# touch f2.txt

Compartiendo el mismo volumen, la carpeta datos es de solo lectura.
carlos:~/environment (main) $ docker run -it --name ubuntu9 -v vol1:/datos:ro ubuntu bash


64. Borrar un volumen
carlos:~/environment (main) $ docker volume rm vol1
Error response from daemon: remove vol1: volume is in use - [c82b88699794398987a857ee62c4f42dd5bd150278b781599f0f9202d30ed1e9, 254e710dda6b95f2cf1b7253c7ca30c4ecf6a2db9c405b896d1233b69da3e4a6]

Elimina volumenes sin usar
carlos:~/environment (main) $ docker volume prune


67. Modificar un contenedor
$ docker run -it --name ubuntu1 ubuntu bash
root@e63a005cde07:/# apt-get update
root@e63a005cde07:/# apt-get install wget
carlos:~/environment (main) $ docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED         STATUS                      PORTS     NAMES
e63a005cde07   ubuntu    "bash"    7 minutes ago   Exited (0) 14 seconds ago             ubuntu1


carlos:~/environment (main) $ docker start -i ubuntu1
root@e63a005cde07:/# wget
wget: missing URL
Usage: wget [OPTION]... [URL]...

Try `wget --help' for more options.

#Dice los cambios que ha tenido este contenedor
carlos:~/environment (main) $ docker diff ubuntu1
C /root
A /root/.bash_history
A /index.html
A /index.html.1
C /usr
C /usr/local
C /usr/local/share
A /usr/local/share/ca-certificates
C /usr/share
C /usr/share/doc
A /usr/share/doc/libssl1.1
A /usr/share/doc/libssl1.1/changelog.Debian.gz
A /usr/share/doc/libssl1.1/copyright


68. Docker commit. Crear una imagen manualmente
carlos:~/environment (main) $ docker commit ubuntu1 mi_ubuntu                                                                                                                                           
sha256:3587aedb13bcee1cc29bd1bfb5293f2ad7a29fedfc36b03f7e9681374a748953

carlos:~/environment (main) $ docker images
REPOSITORY   TAG       IMAGE ID       CREATED          SIZE
mi_ubuntu    latest    3587aedb13bc   28 seconds ago   110MB
ubuntu       latest    9873176a8ff5   2 weeks ago      72.7MB

carlos:~/environment (main) $ docker run -it mi_ubuntu bash
root@670298ad049c:/# wget
wget: missing URL
Usage: wget [OPTION]... [URL]...

Try `wget --help' for more options.
root@670298ad049c:/# 


69. Dockerfile
70. Crear una imagen de un Dockerfile

# Archivo Dockefile dentro de la carpeta ~/environment/Docker/imagen_python
# Cargue de la imagen inicial
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python

# Se ejecutan las instrucciones del archivo Dockerfile -t imagen_python crea una imagen de nombre imagen_python
carlos:~/environment/Docker/imagen_python (main) $ docker build -t imagen_python .


carlos:~/environment/Docker/imagen_python (main) $ docker images
REPOSITORY      TAG       IMAGE ID       CREATED          SIZE
imagen_python   latest    e872741f236e   4 minutes ago    138MB
mi_ubuntu       latest    3587aedb13bc   35 minutes ago   110MB
ubuntu          latest    9873176a8ff5   2 weeks ago      72.7MB

carlos:~/environment/Docker/imagen_python (main) $ docker run -it imagen_python python
Python 2.7.18 (default, Mar  8 2021, 13:02:45) 
[GCC 9.3.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 

71. RUN

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

carlos:~/environment (main) $ docker image history imagen_python
IMAGE          CREATED       CREATED BY                                      SIZE      COMMENT
e872741f236e   6 days ago    /bin/sh -c apt-get install -y python            36.4MB    
22d14bd65edf   6 days ago    /bin/sh -c apt-get update                       29.3MB    
9873176a8ff5   3 weeks ago   /bin/sh -c #(nop)  CMD ["bash"]                 0B        
<missing>      3 weeks ago   /bin/sh -c #(nop) ADD file:920cf788d1ba88f76…   72.7MB  


carlos:~/environment/Docker/imagen_python (main) $ docker build -t imagen_python:v1 .

carlos:~/environment/Docker/imagen_python (main) $ docker images
REPOSITORY      TAG       IMAGE ID       CREATED         SIZE
imagen_python   v1        801f7994a98f   3 minutes ago   235MB
imagen_python   latest    e872741f236e   6 days ago      138MB
mi_ubuntu       latest    3587aedb13bc   6 days ago      110MB
ubuntu          latest    9873176a8ff5   3 weeks ago     72.7MB


carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm imagen_python:v1 bash
root@15a4ffaa64b9:/# ls
bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

root@15a4ffaa64b9:/# cat /etc/version                                                                                                                                                                   
1.0

root@15a4ffaa64b9:/# git
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]



72. CMD

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
CMD echo "Welcome to this container"

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 .

carlos:~/environment/Docker/imagen_python (main) $  docker images
REPOSITORY      TAG       IMAGE ID       CREATED          SIZE
image           v1        95023b47cd91   24 seconds ago   235MB
imagen_python   v1        801f7994a98f   21 hours ago     235MB
imagen_python   latest    e872741f236e   7 days ago       138MB
mi_ubuntu       latest    3587aedb13bc   7 days ago       110MB
ubuntu          latest    9873176a8ff5   3 weeks ago      72.7MB

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1                                                                                                                         
Welcome to this container

carlos:~/environment/Docker/imagen_python (main) $ docker rmi image:v1
Untagged: image:v1
Deleted: sha256:95023b47cd918f3b9d1a62ae5345664fa9a249b5475ec78cbf3561d33638a2a7

------

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
CMD ["echo","Welcome to this container"]


carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 .
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1                                                                                                                         
Welcome to this container

carlos:~/environment/Docker/imagen_python (main) $ docker image history image:v1
IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT
95d14947c473   3 minutes ago   /bin/sh -c #(nop)  CMD ["echo" "Welcome to t…   0B        
801f7994a98f   21 hours ago    /bin/sh -c echo 1.0 >> /etc/version && apt-g…   96.6MB    
e872741f236e   7 days ago      /bin/sh -c apt-get install -y python            36.4MB    
22d14bd65edf   7 days ago      /bin/sh -c apt-get update                       29.3MB    
9873176a8ff5   3 weeks ago     /bin/sh -c #(nop)  CMD ["bash"]                 0B        
<missing>      3 weeks ago     /bin/sh -c #(nop) ADD file:920cf788d1ba88f76…   72.7MB  



# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
CMD /bin/bash

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 . 
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1
root@8b4a0866a8de:/# 

carlos:~/environment/Docker/imagen_python (main) $ docker image history image:v1
IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT
f977cfbe0722   2 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        
801f7994a98f   22 hours ago    /bin/sh -c echo 1.0 >> /etc/version && apt-g…   96.6MB    
e872741f236e   7 days ago      /bin/sh -c apt-get install -y python            36.4MB    
22d14bd65edf   7 days ago      /bin/sh -c apt-get update                       29.3MB    
9873176a8ff5   3 weeks ago     /bin/sh -c #(nop)  CMD ["bash"]                 0B        
<missing>      3 weeks ago     /bin/sh -c #(nop) ADD file:920cf788d1ba88f76…   72.7MB  



# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
CMD ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 . 
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1
root@8b4a0866a8de:/# 

carlos:~/environment/Docker/imagen_python (main) $ docker image history image:v1                                                                                                                        
IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT
e04f77470b66   20 seconds ago   /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B        
801f7994a98f   22 hours ago     /bin/sh -c echo 1.0 >> /etc/version && apt-g…   96.6MB    
e872741f236e   7 days ago       /bin/sh -c apt-get install -y python            36.4MB    
22d14bd65edf   7 days ago       /bin/sh -c apt-get update                       29.3MB    
9873176a8ff5   3 weeks ago      /bin/sh -c #(nop)  CMD ["bash"]                 0B        
<missing>      3 weeks ago      /bin/sh -c #(nop) ADD file:920cf788d1ba88f76…   72.7MB


73. ENTRYPOINT

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
ENTRYPOINT ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 .
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1 df -h
/usr/bin/df: /usr/bin/df: cannot execute binary file

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1
root@e05d77184bb3:/# 


# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
ENTRYPOINT ["df"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v1 .

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v1 -h                                                                                                                      
Filesystem      Size  Used Avail Use% Mounted on
overlay          30G  6.5G   23G  23% /
tmpfs            64M     0   64M   0% /dev
tmpfs           490M     0  490M   0% /sys/fs/cgroup
shm              64M     0   64M   0% /dev/shm
/dev/xvda1       30G  6.5G   23G  23% /etc/hosts
tmpfs           490M     0  490M   0% /proc/acpi
tmpfs           490M     0  490M   0% /proc/scsi
tmpfs           490M     0  490M   0% /sys/firmware


74. WORKDIR

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v3 .
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v3
root@6f6b5a7c91e0:/datos1# 

75. COPY-ADD

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v4 .
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v4

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v4
root@532936181c4c:/datos1# ls
f2.txt  index.html
root@532936181c4c:/datos1# 



tar cvf f.tar f1 f2 f3 f4 f5

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ADD##
ADD docs docs
ADD f* /datos/

# Copia el contenido de f.tar (desempaqueta) al directorio por defecto, /datos1
ADD f.tar .

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v5 .

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v5
root@f6a68068c9ce:/datos1# ls
docs  f1  f2  f2.txt  f3  f4  f5  index.html
root@f6a68068c9ce:/datos1# cd /datos
root@f6a68068c9ce:/datos# ls
app.log  f1  f1.txt  f2  f3  f4  f5



76. ENV

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v4
root@ebb2d2a066e6:/datos1# env
HOSTNAME=ebb2d2a066e6
PWD=/datos1
HOME=/root
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
LESSCLOSE=/usr/bin/lesspipe %s %s
TERM=xterm
LESSOPEN=| /usr/bin/lesspipe %s
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env


carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm --env x=10 image:v4
root@e8e7916d1dc8:/datos1# env
HOSTNAME=e8e7916d1dc8
PWD=/datos1
x=10
HOME=/root
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
LESSCLOSE=/usr/bin/lesspipe %s %s
TERM=xterm
LESSOPEN=| /usr/bin/lesspipe %s
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env
root@e8e7916d1dc8:/datos1#

root@e8e7916d1dc8:/datos1# echo $x
10

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm --env x=`pwd` image:v4                                                                                                                                                        
root@e4a536cdd75f:/datos1#
root@e4a536cdd75f:/datos1# echo $x                                                                                                                                                                                                                   
/home/ubuntu/environment/Docker/imagen_python

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ADD##
ADD docs docs
ADD f* /datos/

# Copia el contenido de f.tar (desempaqueta) al directorio por defecto, /datos1
ADD f.tar .

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

##ENV##
ENV dir=/data dir1=/data1
RUN mkdir $dir && mkdir $dir1

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v5 .

carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v5
root@0b94b8acf788:/datos1#
root@0b94b8acf788:~# cd /
root@0b94b8acf788:/# ls
bin  boot  data  data1  dato1  datos  datos1  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

root@0b94b8acf788:/# env
HOSTNAME=0b94b8acf788
PWD=/
HOME=/root
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
dir1=/data1
LESSCLOSE=/usr/bin/lesspipe %s %s
TERM=xterm
LESSOPEN=| /usr/bin/lesspipe %s
dir=/data
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env
OLDPWD=/data1
root@0b94b8acf788:/# 

77. ARG

# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ADD##
ADD docs docs
ADD f* /datos/

# Copia el contenido de f.tar (desempaqueta) al directorio por defecto, /datos1
ADD f.tar .

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

##ENV##
ENV dir=/data dir1=/data1
RUN mkdir $dir && mkdir $dir1


##ARG##
ARG dir2
RUN mkdir $dir2

$ docker build -t image:v6 --build-arg dir2=/data2 .  
root@822c4432cd08:/# ls /
$ docker run -it --rm image:v6
bin  boot  data  data1  data2  dato1  datos  datos1  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var


# Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping

##WORDIR##
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /dato1
WORKDIR /datos1
RUN touch f2.txt
ENTRYPOINT ["/bin/bash"]

##COPY##
COPY index.html .
COPY app.log /datos

##ADD##
ADD docs docs
ADD f* /datos/

# Copia el contenido de f.tar (desempaqueta) al directorio por defecto, /datos1
ADD f.tar .

##ENTRYPOINT##
ENTRYPOINT ["/bin/bash"]

##ENV##
ENV dir=/data dir1=/data1
RUN mkdir $dir && mkdir $dir1



##ARG##
ARG dir2
RUN mkdir $dir2
ARG user
ENV user_docker $user
ADD add_user.sh /datos1
RUN /datos1/add_user.sh

# add_user.sh
adduser $user_docker 

carlos:~/environment/Docker/imagen_python (main) $ docker build -t image:v6 --build-arg dir2=/data2 --build-arg user=augusto . 
carlos:~/environment/Docker/imagen_python (main) $ docker run -it --rm image:v6
root@561cbc35c470:/datos1# cat /etc/passwd
.
.
.
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
augusto:x:1000:1000:,,,:/home/augusto:/bin/bash






